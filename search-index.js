var searchIndex = {};
searchIndex["gitjournal"] = {"doc":"The Git Commit Message and Changelog Generation Framework","items":[[3,"GitJournal","gitjournal","The main structure of git-journal.",null,null],[12,"config","","The configuration structure",0,null],[0,"errors","","Basic error handling mechanisms",null,null],[3,"Error","gitjournal::errors","The Error type.",null,null],[12,"0","","The kind of the error.",1,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",2,null],[13,"Git","","A git error.",2,null],[13,"Io","","An I/O error.",2,null],[13,"Log","","A logger error error.",2,null],[13,"Term","","A terminal error.",2,null],[13,"TomlDeser","","A toml deserialization error.",2,null],[13,"ParseInt","","A integer parsing error.",2,null],[13,"TomlSer","","A toml serialization error.",2,null],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns *some type that can be converted to `ErrorKind`*, boxes the original error to store as the cause, then returns a new error containing the original error.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",1,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",1,null],[11,"with_chain","","",1,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"self"}}],[11,"kind","","",1,null],[11,"iter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extract_backtrace","","",1,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",1,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",1,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",1,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",1,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"shutdownloggererror"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"parseinterror"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"deref","","",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[0,"config","gitjournal","Everything related to the git-journal configuration. The configuration files are stored in toml format with the file name `.gitjournal.toml`.",null,null],[3,"Config","gitjournal::config","The configuration structure for git-journal.",null,null],[12,"categories","","Specifies the available categories for the commit message",4,null],[12,"category_delimiters","","Set the characters where the categories are wrapped in",4,null],[12,"colored_output","","Set to false if the output should not be colored",4,null],[12,"default_template","","Specifies the default template. Will be used for tag validation and printing.",4,null],[12,"enable_debug","","Show or hide the debug messages like `[OKAY] ...` or `[INFO] ...`",4,null],[12,"excluded_commit_tags","","Excluded tags in an array, e.g. \"internal\"",4,null],[12,"enable_footers","","Enable or disable the output and accumulation of commit footers",4,null],[12,"show_commit_hash","","Show or hide the commit hash for every entry",4,null],[12,"show_prefix","","Show or hide the commit message prefix, e.g. JIRA-1234",4,null],[12,"sort_by","","Sort the commits during the output by \"date\" (default) or \"name\"",4,null],[12,"template_prefix","","Commit message template prefix which will be added during commit preparation",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"config"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"new","","Constructs a new `Config` with default values.",4,{"inputs":[],"output":{"name":"self"}}],[11,"save_default_config","","Save the default configuration file in a certain path.",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"load","","Load a configuration file from a certain path.",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_default_config","","Check if the configuration matches with the default one.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","gitjournal","Constructs a new `GitJournal`. Searches upwards if the given path does not contain the `.git` directory.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"setup","","Does the setup on the target git repository.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"prepare","","Prepare a commit message before the user edits it. This includes also a verification of the commit message, e.g. for amended commits.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"}],"output":{"name":"result"}}],[11,"verify","","Verify a given commit message against the parsing rules of RFC0001",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse_log","","Parses a revision range for a `GitJournal`.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"u32"},{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[11,"generate_template","","Generates an output template from the current parsing results.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"print_log","","Prints the resulting log in a short or detailed variant. Will use the template as an output formatter if provided.",0,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}]],"paths":[[3,"GitJournal"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[3,"Config"]]};
initSearch(searchIndex);
